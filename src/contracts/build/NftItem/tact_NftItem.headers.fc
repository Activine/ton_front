;;
;; Header files for NftItem
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $NftTransfer$_load
(slice, ((int, slice, slice, cell, int, slice))) $NftTransfer$_load(slice sc_0) inline_ref;

;; $NftOwnershipAssigned$_store
builder $NftOwnershipAssigned$_store(builder build_0, (int, slice, slice) v) inline;

;; $NftOwnershipAssigned$_store_cell
cell $NftOwnershipAssigned$_store_cell((int, slice, slice) v) inline;

;; $NftExcesses$_store
builder $NftExcesses$_store(builder build_0, (int) v) inline;

;; $NftExcesses$_store_cell
cell $NftExcesses$_store_cell((int) v) inline;

;; $NftGetStaticData$_load
(slice, ((int))) $NftGetStaticData$_load(slice sc_0) inline;

;; $NftReportStaticData$_store
builder $NftReportStaticData$_store(builder build_0, (int, int, slice) v) inline;

;; $NftReportStaticData$_store_cell
cell $NftReportStaticData$_store_cell((int, int, slice) v) inline;

;; $NftDestroy$_load
(slice, ((int))) $NftDestroy$_load(slice sc_0) inline;

;; $NftDeploy$_load
(slice, ((int, slice, cell, slice))) $NftDeploy$_load(slice sc_0) inline;

;; $SetLotteryData$_load
(slice, ((int, int, int, int))) $SetLotteryData$_load(slice sc_0) inline;

;; $GetTicketStatus$_store
builder $GetTicketStatus$_store(builder build_0, (int, int, int) v) inline;

;; $GetTicketStatus$_store_cell
cell $GetTicketStatus$_store_cell((int, int, int) v) inline;

;; $TicketStatus$_load
(slice, ((int, int))) $TicketStatus$_load(slice sc_0) inline;

;; $ClaimResponse$_store
builder $ClaimResponse$_store(builder build_0, (int, slice, int) v) inline;

;; $ClaimResponse$_store_cell
cell $ClaimResponse$_store_cell((int, slice, int) v) inline;

;; $Numbers$_store
builder $Numbers$_store(builder build_0, (int, int, int, int) v) inline;

;; $Numbers$_load
(slice, ((int, int, int, int))) $Numbers$_load(slice sc_0) inline;

;; $NftItem$_store
builder $NftItem$_store(builder build_0, (int, slice, slice, int, cell, slice, int, (int, int, int, int), int) v) inline;

;; $NftItem$_load
(slice, ((int, slice, slice, int, cell, slice, int, (int, int, int, int), int))) $NftItem$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $NftData$_to_external
(int, int, slice, slice, cell) $NftData$_to_external(((int, int, slice, slice, cell)) v) inline;

;; $ItemLotteryData$_to_external
(int, (int, int, int, int)) $ItemLotteryData$_to_external(((int, (int, int, int, int))) v) inline;

;; $NftItem$init$_load
(slice, ((slice, int, slice))) $NftItem$init$_load(slice sc_0) inline;

;; $Numbers$_constructor_first_second_third_match
((int, int, int, int)) $Numbers$_constructor_first_second_third_match(int $first, int $second, int $third, int $match) inline;

;; $global_emptyCell
cell $global_emptyCell() impure inline;

;; $NftItem$_contract_init
(int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $NftItem$_contract_init(slice $collection, int $index, slice $operator) impure inline_ref;

;; $NftItem$_contract_load
(int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $NftItem$_contract_load() impure inline_ref;

;; $NftItem$_contract_store
() $NftItem$_contract_store((int, slice, slice, int, cell, slice, int, (int, int, int, int), int) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $ItemLotteryData$_constructor_status_numbers
((int, (int, int, int, int))) $ItemLotteryData$_constructor_status_numbers(int $status, (int, int, int, int) $numbers) inline;

;; $NftItem$_fun_lottery_data
((int, slice, slice, int, cell, slice, int, (int, int, int, int), int), (int, (int, int, int, int))) $NftItem$_fun_lottery_data((int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $self) impure inline_ref;

;; $NftItem$_fun_owner
((int, slice, slice, int, cell, slice, int, (int, int, int, int), int), slice) $NftItem$_fun_owner((int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $self) impure inline_ref;

;; $NftItem$_fun_operator
((int, slice, slice, int, cell, slice, int, (int, int, int, int), int), slice) $NftItem$_fun_operator((int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $self) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $NftItem$_fun_forward
((int, slice, slice, int, cell, slice, int, (int, int, int, int), int), ()) $NftItem$_fun_forward((int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $NftItem$_fun_reply
((int, slice, slice, int, cell, slice, int, (int, int, int, int), int), ()) $NftItem$_fun_reply((int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $self, cell $body) impure inline;

;; $NftData$_constructor_deployed_index_collection_owner_content
((int, int, slice, slice, cell)) $NftData$_constructor_deployed_index_collection_owner_content(int $deployed, int $index, slice $collection, slice $owner, cell $content) inline;

;; $NftItem$_fun_get_nft_data
((int, slice, slice, int, cell, slice, int, (int, int, int, int), int), (int, int, slice, slice, cell)) $NftItem$_fun_get_nft_data((int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $NftExcesses$_constructor_query_id
((int)) $NftExcesses$_constructor_query_id(int $query_id) inline;

;; $ClaimResponse$_constructor_winner_match_query_id
((int, slice, int)) $ClaimResponse$_constructor_winner_match_query_id(slice $winner, int $match, int $query_id) inline;

;; $GetTicketStatus$_constructor_status_index_query_id
((int, int, int)) $GetTicketStatus$_constructor_status_index_query_id(int $status, int $index, int $query_id) inline;

;; $NftOwnershipAssigned$_constructor_query_id_prev_owner_forward_payload
((int, slice, slice)) $NftOwnershipAssigned$_constructor_query_id_prev_owner_forward_payload(int $query_id, slice $prev_owner, slice $forward_payload) inline;

;; $SendParameters$_constructor_to_value_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body(slice $to, int $value, cell $body) inline;

;; $NftReportStaticData$_constructor_query_id_index_collection
((int, int, slice)) $NftReportStaticData$_constructor_query_id_index_collection(int $query_id, int $index, slice $collection) inline;
