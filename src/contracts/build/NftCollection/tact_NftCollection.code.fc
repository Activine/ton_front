#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_NftCollection.headers.fc";
#include "tact_NftCollection.stdlib.fc";
#include "tact_NftCollection.storage.fc";

;;
;; Contract NftCollection functions
;;

(slice, slice, int, cell) $NftCollection$_contract_init(slice $owner, cell $content, slice $operator) impure inline_ref {
    var (($self'owner, $self'operator, $self'next_index, $self'content)) = (null(), null(), 100, null());
    $self'owner = $owner;
    $self'content = $content;
    $self'operator = $operator;
    return ($self'owner, $self'operator, $self'next_index, $self'content);
}

((slice, slice, int, cell), (int, cell, slice)) $NftCollection$_fun_get_collection_data((slice, slice, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'operator, $self'next_index, $self'content)) = $self;
    return (($self'owner, $self'operator, $self'next_index, $self'content), $CollectionData$_constructor_next_index_content_owner($self'next_index, $self'content, $self'owner));
}

((slice, slice, int, cell), slice) $NftCollection$_fun_get_nft_address_by_index((slice, slice, int, cell) $self, int $index) impure inline_ref {
    var (($self'owner, $self'operator, $self'next_index, $self'content)) = $self;
    return (($self'owner, $self'operator, $self'next_index, $self'content), $global_contractAddress($NftItem$_init_child(__tact_context_sys, my_address(), $index, $self'operator)));
}

((slice, slice, int, cell), cell) $NftCollection$_fun_get_nft_content((slice, slice, int, cell) $self, int $index, cell $individual_content) impure inline_ref {
    var (($self'owner, $self'operator, $self'next_index, $self'content)) = $self;
    return (($self'owner, $self'operator, $self'next_index, $self'content), $individual_content);
}

((slice, slice, int, cell), slice) $NftCollection$_fun_ownerCollection((slice, slice, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'operator, $self'next_index, $self'content)) = $self;
    return (($self'owner, $self'operator, $self'next_index, $self'content), $self'owner);
}

((slice, slice, int, cell), slice) $NftCollection$_fun_operator((slice, slice, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'operator, $self'next_index, $self'content)) = $self;
    return (($self'owner, $self'operator, $self'next_index, $self'content), $self'operator);
}

((slice, slice, int, cell), slice) $NftCollection$_fun_owner((slice, slice, int, cell) $self) impure inline_ref {
    var (($self'owner, $self'operator, $self'next_index, $self'content)) = $self;
    return (($self'owner, $self'operator, $self'next_index, $self'content), $self'owner);
}

;;
;; Receivers of a Contract NftCollection
;;

(((slice, slice, int, cell)), ()) $NftCollection$_internal_binary_RequestNftDeploy((slice, slice, int, cell) $self, (int, int, slice, cell) $msg) impure inline {
    var ($self'owner, $self'operator, $self'next_index, $self'content) = $self;
    var ($msg'index, $msg'amount, $msg'owner, $msg'content) = $msg;
    throw_unless(4429, ( (( __tact_slice_eq_bits(__tact_context_get_sender(), $self'owner) )) ? (true) : (( __tact_slice_eq_bits(__tact_context_get_sender(), $self'operator) )) ));
    throw_unless(44083, ($msg'index <= $self'next_index));
    var ($nft_init'code, $nft_init'data) = $NftItem$_init_child(__tact_context_sys, my_address(), $msg'index, $self'operator);
    slice $nft_address = $global_contractAddress(($nft_init'code, $nft_init'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_data_code_body($nft_address, $msg'amount, 1, false, $nft_init'data, $nft_init'code, $NftDeploy$_store_cell($NftDeploy$_constructor_index_owner_content_operator($msg'index, $msg'owner, $msg'content, $self'operator))));
    if (($msg'index == $self'next_index)) {
        $self'next_index = ($self'next_index + 1);
    }
    return (($self'owner, $self'operator, $self'next_index, $self'content), ());
}

(((slice, slice, int, cell)), ()) $NftCollection$_internal_binary_Deploy((slice, slice, int, cell) $self, (int) $deploy) impure inline {
    var ($self'owner, $self'operator, $self'next_index, $self'content) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'owner, $self'operator, $self'next_index, $self'content)~$NftCollection$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'owner, $self'operator, $self'next_index, $self'content), ());
}

;;
;; Get methods of a Contract NftCollection
;;

_ %get_collection_data() method_id(102491) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_collection_data();
    return $CollectionData$_to_external(res);
}

_ %get_nft_address_by_index(int $index) method_id(92067) {
    int $index = $index;
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_nft_address_by_index($index);
    return res;
}

_ %get_nft_content(int $index, cell $individual_content) method_id(68445) {
    int $index = $index;
    cell $individual_content = $individual_content;
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_get_nft_content($index, $individual_content);
    return res;
}

_ %ownerCollection() method_id(103272) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_ownerCollection();
    return res;
}

_ %operator() method_id(129896) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_operator();
    return res;
}

_ %owner() method_id(83229) {
    var self = $NftCollection$_contract_load();
    var res = self~$NftCollection$_fun_owner();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract NftCollection
;;

((slice, slice, int, cell), int) $NftCollection$_contract_router_internal((slice, slice, int, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive RequestNftDeploy message
    if (op == 1410495530) {
        var msg = in_msg~$RequestNftDeploy$_load();
        self~$NftCollection$_internal_binary_RequestNftDeploy(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$NftCollection$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $NftCollection$_contract_load();
    
    ;; Handle operation
    int handled = self~$NftCollection$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $NftCollection$_contract_store(self);
}
