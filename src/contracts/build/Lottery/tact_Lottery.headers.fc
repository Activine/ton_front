;;
;; Header files for Lottery
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; __tact_int_to_string
slice __tact_int_to_string(int src) inline_ref;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Transfer$_store
builder $Transfer$_store(builder build_0, (int, int, slice, slice, cell, int) v) inline_ref;

;; $Transfer$_store_cell
cell $Transfer$_store_cell((int, int, slice, slice, cell, int) v) inline;

;; $RequestNftDeploy$_store
builder $RequestNftDeploy$_store(builder build_0, (int, int, slice, cell) v) inline;

;; $RequestNftDeploy$_store_cell
cell $RequestNftDeploy$_store_cell((int, int, slice, cell) v) inline;

;; $SetLotteryData$_store
builder $SetLotteryData$_store(builder build_0, (int, int, int, int) v) inline;

;; $SetLotteryData$_store_cell
cell $SetLotteryData$_store_cell((int, int, int, int) v) inline;

;; $SetData$_load
(slice, ((slice, slice))) $SetData$_load(slice sc_0) inline;

;; $BuyToken$_load
(slice, ((int, int, cell, int))) $BuyToken$_load(slice sc_0) inline;

;; $BuyTicket$_load
(slice, ((int, int, slice, slice, cell, int, cell, int))) $BuyTicket$_load(slice sc_0) inline_ref;

;; $CheckTicket$_load
(slice, ((int, int))) $CheckTicket$_load(slice sc_0) inline;

;; $GetTicketStatus$_load
(slice, ((int, int, int))) $GetTicketStatus$_load(slice sc_0) inline;

;; $TicketStatus$_store
builder $TicketStatus$_store(builder build_0, (int, int) v) inline;

;; $TicketStatus$_store_cell
cell $TicketStatus$_store_cell((int, int) v) inline;

;; $ClaimReward$_load
(slice, ((int, int))) $ClaimReward$_load(slice sc_0) inline;

;; $ClaimResponse$_load
(slice, ((int, slice, int))) $ClaimResponse$_load(slice sc_0) inline;

;; $Lottery$_store
builder $Lottery$_store(builder build_0, (slice, slice, int, int) v) inline;

;; $Lottery$_load
(slice, ((slice, slice, int, int))) $Lottery$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $RoundData$_to_external
(int, int, int, int) $RoundData$_to_external(((int, int, int, int)) v) inline;

;; $LotteryData$_to_external
(slice, slice) $LotteryData$_to_external(((slice, slice)) v) inline;

;; $TokenWallet$init$_store
builder $TokenWallet$init$_store(builder build_0, (slice, slice, slice) v) inline;

;; $NftItem$init$_store
builder $NftItem$init$_store(builder build_0, (slice, int, slice) v) inline;

;; $Lottery$_contract_init
(slice, slice, int, int) $Lottery$_contract_init() impure inline_ref;

;; $Lottery$_contract_load
(slice, slice, int, int) $Lottery$_contract_load() impure inline_ref;

;; $Lottery$_contract_store
() $Lottery$_contract_store((slice, slice, int, int) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $TokenWallet$_init_child
(cell, cell) $TokenWallet$_init_child(cell sys', slice $owner, slice $master, slice $operator) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $NftItem$_init_child
(cell, cell) $NftItem$_init_child(cell sys', slice $collection, int $index, slice $operator) inline_ref;

;; $SendParameters$_constructor_to_body_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_body_value_mode(slice $to, cell $body, int $value, int $mode) inline;

;; $Transfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount
((int, int, slice, slice, cell, int)) $Transfer$_constructor_query_id_amount_destination_response_destination_custom_payload_forward_ton_amount(int $query_id, int $amount, slice $destination, slice $response_destination, cell $custom_payload, int $forward_ton_amount) inline;

;; $Lottery$_fun_setReward
((slice, slice, int, int), ()) $Lottery$_fun_setReward((slice, slice, int, int) $self, int $match, slice $winner, int $queryId) impure inline_ref;

;; $RoundData$_constructor_first_second_third_match
((int, int, int, int)) $RoundData$_constructor_first_second_third_match(int $first, int $second, int $third, int $match) inline;

;; $Lottery$_fun_amountMatch
((slice, slice, int, int), int) $Lottery$_fun_amountMatch((slice, slice, int, int) $self, int $a, int $b, int $c) impure inline_ref;

;; $Lottery$_fun_threeRandom
((slice, slice, int, int), (int, int, int, int)) $Lottery$_fun_threeRandom((slice, slice, int, int) $self) impure inline_ref;

;; $Lottery$_fun_random
((slice, slice, int, int), int) $Lottery$_fun_random((slice, slice, int, int) $self) impure inline_ref;

;; $LotteryData$_constructor_nftCollection_paymentToken
((slice, slice)) $LotteryData$_constructor_nftCollection_paymentToken(slice $nftCollection, slice $paymentToken) inline;

;; $Lottery$_fun_lotteryData
((slice, slice, int, int), (slice, slice)) $Lottery$_fun_lotteryData((slice, slice, int, int) $self) impure inline_ref;

;; $Lottery$_fun_paymentToken
((slice, slice, int, int), slice) $Lottery$_fun_paymentToken((slice, slice, int, int) $self) impure inline_ref;

;; $Lottery$_fun_nftCollection
((slice, slice, int, int), slice) $Lottery$_fun_nftCollection((slice, slice, int, int) $self) impure inline_ref;

;; $Lottery$_fun_forward
((slice, slice, int, int), ()) $Lottery$_fun_forward((slice, slice, int, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Lottery$_fun_notify
((slice, slice, int, int), ()) $Lottery$_fun_notify((slice, slice, int, int) $self, cell $body) impure inline;

;; $RequestNftDeploy$_constructor_index_amount_owner_content
((int, int, slice, cell)) $RequestNftDeploy$_constructor_index_amount_owner_content(int $index, int $amount, slice $owner, cell $content) inline;

;; $TicketStatus$_constructor_query_id_getRewards
((int, int)) $TicketStatus$_constructor_query_id_getRewards(int $query_id, int $getRewards) inline;

;; $SetLotteryData$_constructor_first_second_third_match
((int, int, int, int)) $SetLotteryData$_constructor_first_second_third_match(int $first, int $second, int $third, int $match) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;
