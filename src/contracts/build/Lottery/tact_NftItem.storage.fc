;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_body(slice $to, int $value, cell $body) inline {
    return (true, $to, $value, 0, $body, null(), null());
}

;;
;; Type: NftData
;; TLB: _ deployed:bool index:int257 collection:address owner:address content:^cell = NftData
;;

(int, int, slice, slice, cell) $NftData$_to_external(((int, int, slice, slice, cell)) v) inline {
    var (v'deployed, v'index, v'collection, v'owner, v'content) = v; 
    return (v'deployed, v'index, v'collection, v'owner, v'content);
}

((int, int, slice, slice, cell)) $NftData$_constructor_deployed_index_collection_owner_content(int $deployed, int $index, slice $collection, slice $owner, cell $content) inline {
    return ($deployed, $index, $collection, $owner, $content);
}

;;
;; Type: Numbers
;; TLB: _ first:int257 second:int257 third:int257 match:int257 = Numbers
;;

builder $Numbers$_store(builder build_0, (int, int, int, int) v) inline {
    var (v'first, v'second, v'third, v'match) = v;
    build_0 = build_0.store_int(v'first, 257);
    build_0 = build_0.store_int(v'second, 257);
    build_0 = build_0.store_int(v'third, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'match, 257);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, int, int, int))) $Numbers$_load(slice sc_0) inline {
    var v'first = sc_0~load_int(257);
    var v'second = sc_0~load_int(257);
    var v'third = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'match = sc_1~load_int(257);
    return (sc_0, (v'first, v'second, v'third, v'match));
}

((int, int, int, int)) $Numbers$_constructor_first_second_third_match(int $first, int $second, int $third, int $match) inline {
    return ($first, $second, $third, $match);
}

;;
;; Type: ItemLotteryData
;; TLB: _ status:bool numbers:Numbers{first:int257,second:int257,third:int257,match:int257} = ItemLotteryData
;;

(int, (int, int, int, int)) $ItemLotteryData$_to_external(((int, (int, int, int, int))) v) inline {
    var (v'status, v'numbers) = v; 
    return (v'status, v'numbers);
}

((int, (int, int, int, int))) $ItemLotteryData$_constructor_status_numbers(int $status, (int, int, int, int) $numbers) inline {
    return ($status, $numbers);
}

;;
;; Type: NftTransfer
;; Header: 0x5fcc3d14
;; TLB: nft_transfer#5fcc3d14 query_id:uint64 new_owner:address response_destination:address custom_payload:Maybe ^cell forward_amount:coins forward_payload:remainder<slice> = NftTransfer
;;

(slice, ((int, slice, slice, cell, int, slice))) $NftTransfer$_load(slice sc_0) inline_ref {
    throw_unless(129, sc_0~load_uint(32) == 1607220500);
    var v'query_id = sc_0~load_uint(64);
    var v'new_owner = sc_0~__tact_load_address();
    var v'response_destination = sc_0~__tact_load_address();
    var v'custom_payload = sc_0~load_int(1) ? sc_0~load_ref() : null();
    var v'forward_amount = sc_0~load_coins();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'new_owner, v'response_destination, v'custom_payload, v'forward_amount, v'forward_payload));
}

;;
;; Type: NftOwnershipAssigned
;; Header: 0x05138d91
;; TLB: nft_ownership_assigned#05138d91 query_id:uint64 prev_owner:address forward_payload:remainder<slice> = NftOwnershipAssigned
;;

builder $NftOwnershipAssigned$_store(builder build_0, (int, slice, slice) v) inline {
    var (v'query_id, v'prev_owner, v'forward_payload) = v;
    build_0 = store_uint(build_0, 85167505, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'prev_owner);
    build_0 = build_0.store_slice(v'forward_payload);
    return build_0;
}

cell $NftOwnershipAssigned$_store_cell((int, slice, slice) v) inline {
    return $NftOwnershipAssigned$_store(begin_cell(), v).end_cell();
}

((int, slice, slice)) $NftOwnershipAssigned$_constructor_query_id_prev_owner_forward_payload(int $query_id, slice $prev_owner, slice $forward_payload) inline {
    return ($query_id, $prev_owner, $forward_payload);
}

;;
;; Type: NftExcesses
;; Header: 0x6f89f5e3
;; TLB: nft_excesses#6f89f5e3 query_id:uint64 = NftExcesses
;;

builder $NftExcesses$_store(builder build_0, (int) v) inline {
    var (v'query_id) = v;
    build_0 = store_uint(build_0, 1871312355, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    return build_0;
}

cell $NftExcesses$_store_cell((int) v) inline {
    return $NftExcesses$_store(begin_cell(), v).end_cell();
}

((int)) $NftExcesses$_constructor_query_id(int $query_id) inline {
    return ($query_id);
}

;;
;; Type: NftGetStaticData
;; Header: 0x2fcb26a2
;; TLB: nft_get_static_data#2fcb26a2 query_id:uint64 = NftGetStaticData
;;

(slice, ((int))) $NftGetStaticData$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 801842850);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'query_id));
}

;;
;; Type: NftReportStaticData
;; Header: 0x8b771735
;; TLB: nft_report_static_data#8b771735 query_id:uint64 index:uint256 collection:address = NftReportStaticData
;;

builder $NftReportStaticData$_store(builder build_0, (int, int, slice) v) inline {
    var (v'query_id, v'index, v'collection) = v;
    build_0 = store_uint(build_0, 2339837749, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'index, 256);
    build_0 = __tact_store_address(build_0, v'collection);
    return build_0;
}

cell $NftReportStaticData$_store_cell((int, int, slice) v) inline {
    return $NftReportStaticData$_store(begin_cell(), v).end_cell();
}

((int, int, slice)) $NftReportStaticData$_constructor_query_id_index_collection(int $query_id, int $index, slice $collection) inline {
    return ($query_id, $index, $collection);
}

;;
;; Type: NftDestroy
;; Header: 0x1f04537a
;; TLB: nft_destroy#1f04537a query_id:uint64 = NftDestroy
;;

(slice, ((int))) $NftDestroy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 520377210);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'query_id));
}

;;
;; Type: NftDeploy
;; Header: 0xf1939aec
;; TLB: nft_deploy#f1939aec index:uint256 owner:address content:^cell operator:address = NftDeploy
;;

(slice, ((int, slice, cell, slice))) $NftDeploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4052982508);
    var v'index = sc_0~load_uint(256);
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    var v'operator = sc_0~__tact_load_address();
    return (sc_0, (v'index, v'owner, v'content, v'operator));
}

;;
;; Type: SetLotteryData
;; Header: 0xf266e5f9
;; TLB: set_lottery_data#f266e5f9 first:uint8 second:uint8 third:uint8 match:uint8 = SetLotteryData
;;

(slice, ((int, int, int, int))) $SetLotteryData$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4066829817);
    var v'first = sc_0~load_uint(8);
    var v'second = sc_0~load_uint(8);
    var v'third = sc_0~load_uint(8);
    var v'match = sc_0~load_uint(8);
    return (sc_0, (v'first, v'second, v'third, v'match));
}

;;
;; Type: GetTicketStatus
;; Header: 0x2a3a2357
;; TLB: get_ticket_status#2a3a2357 query_id:uint64 status:bool index:uint256 = GetTicketStatus
;;

builder $GetTicketStatus$_store(builder build_0, (int, int, int) v) inline {
    var (v'query_id, v'status, v'index) = v;
    build_0 = store_uint(build_0, 708453207, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_int(v'status, 1);
    build_0 = build_0.store_uint(v'index, 256);
    return build_0;
}

cell $GetTicketStatus$_store_cell((int, int, int) v) inline {
    return $GetTicketStatus$_store(begin_cell(), v).end_cell();
}

((int, int, int)) $GetTicketStatus$_constructor_status_index_query_id(int $status, int $index, int $query_id) inline {
    return ($query_id, $status, $index);
}

;;
;; Type: TicketStatus
;; Header: 0x0d7e60c0
;; TLB: ticket_status#0d7e60c0 getRewards:bool query_id:uint64 = TicketStatus
;;

(slice, ((int, int))) $TicketStatus$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 226386112);
    var v'getRewards = sc_0~load_int(1);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'getRewards, v'query_id));
}

;;
;; Type: ClaimResponse
;; Header: 0x2fa38b15
;; TLB: claim_response#2fa38b15 query_id:uint64 winner:address match:uint8 = ClaimResponse
;;

builder $ClaimResponse$_store(builder build_0, (int, slice, int) v) inline {
    var (v'query_id, v'winner, v'match) = v;
    build_0 = store_uint(build_0, 799247125, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = __tact_store_address(build_0, v'winner);
    build_0 = build_0.store_uint(v'match, 8);
    return build_0;
}

cell $ClaimResponse$_store_cell((int, slice, int) v) inline {
    return $ClaimResponse$_store(begin_cell(), v).end_cell();
}

((int, slice, int)) $ClaimResponse$_constructor_winner_match_query_id(slice $winner, int $match, int $query_id) inline {
    return ($query_id, $winner, $match);
}

;;
;; Type: NftItem
;;

builder $NftItem$_store(builder build_0, (int, slice, slice, int, cell, slice, int, (int, int, int, int), int) v) inline {
    var (v'deployed, v'collection, v'owner, v'index, v'content, v'operator, v'ticketStatus, (v'numbers'first, v'numbers'second, v'numbers'third, v'numbers'match), v'rewards) = v;
    build_0 = build_0.store_int(v'deployed, 1);
    build_0 = __tact_store_address(build_0, v'collection);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'index, 256);
    build_0 = build_0.store_ref(v'content);
    var build_1 = begin_cell();
    build_1 = __tact_store_address(build_1, v'operator);
    build_1 = build_1.store_int(v'ticketStatus, 1);
    var build_2 = begin_cell();
    build_2 = $Numbers$_store(build_2, (v'numbers'first, v'numbers'second, v'numbers'third, v'numbers'match));
    build_2 = build_2.store_int(v'rewards, 1);
    build_1 = store_ref(build_1, build_2.end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, slice, int, cell, slice, int, (int, int, int, int), int))) $NftItem$_load(slice sc_0) inline {
    var v'deployed = sc_0~load_int(1);
    var v'collection = sc_0~__tact_load_address();
    var v'owner = sc_0~__tact_load_address();
    var v'index = sc_0~load_uint(256);
    var v'content = sc_0~load_ref();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'operator = sc_1~__tact_load_address();
    var v'ticketStatus = sc_1~load_int(1);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'numbers = sc_2~$Numbers$_load();
    var v'rewards = sc_2~load_int(1);
    return (sc_0, (v'deployed, v'collection, v'owner, v'index, v'content, v'operator, v'ticketStatus, v'numbers, v'rewards));
}

(slice, ((slice, int, slice))) $NftItem$init$_load(slice sc_0) inline {
    var v'collection = sc_0~__tact_load_address();
    var v'index = sc_0~load_int(257);
    var v'operator = sc_0~__tact_load_address();
    return (sc_0, (v'collection, v'index, v'operator));
}

(int, slice, slice, int, cell, slice, int, (int, int, int, int), int) $NftItem$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NftItem$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $collection, int $index, slice $operator) = $sc~$NftItem$init$_load();
        $sc.end_parse();
        return $NftItem$_contract_init($collection, $index, $operator);
    }
}

() $NftItem$_contract_store((int, slice, slice, int, cell, slice, int, (int, int, int, int), int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $NftItem$_store(b, v);
    set_data(b.end_cell());
}